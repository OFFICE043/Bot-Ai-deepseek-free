import os
import logging
from aiogram import Bot, Dispatcher, types, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import aiohttp
import json
from dotenv import load_dotenv

# .env —Ñ–∞–π–ª—ã–Ω –∂“Ø–∫—Ç–µ—É
load_dotenv()

# –¢–æ–∫–µ–Ω–¥–µ—Ä–¥—ñ –∞–ª—É
BOT_TOKEN = os.getenv("BOT_TOKEN")
DEEPSEEK_API_KEY = os.getenv("DEEPSEEK_API_KEY")
DEEPSEEK_API_URL = "https://api.deepseek.com/v1/chat/completions"

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ “õ“±—Ä—É
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Bot –∂”ô–Ω–µ Dispatcher “õ“±—Ä—É
bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# /start –∫–æ–º–∞–Ω–¥–∞—Å—ã
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    try:
        welcome_text = (
            "üëã –°–∞–ª–µ–º! –ú–µ–Ω DeepSeek –±–æ—Ç–∏–º–∞–Ω!\n\n"
            "–ú–µ–Ω —Å—ñ–∑–≥–µ –∫–µ–ª–µ—Å—ñ–ª–µ—Ä–¥–µ –∫”©–º–µ–∫—Ç–µ—Å–µ –∞–ª–∞–º—ã–Ω:\n"
            "‚Ä¢ –ê–Ω–∏–º–µ —Ç—É—Ä–∞–ª—ã –∞“õ–ø–∞—Ä–∞—Ç –±–µ—Ä—É\n"
            "‚Ä¢ –°“±—Ä–∞“õ—Ç–∞—Ä“ì–∞ –∂–∞—É–∞–ø –±–µ—Ä—É\n"
            "‚Ä¢ ”ò—Ä —Ç“Ø—Ä–ª—ñ —Ç–∞“õ—ã—Ä—ã–ø—Ç–∞—Ä–¥–∞ —Å”©–π–ª–µ—Å—É\n\n"
            "–ñ–∞–π “ì–∞–Ω–∞ —Ö–∞–±–∞—Ä–ª–∞–º–∞ –∂–∞–∑—ã“£—ã–∑!"
        )
        await message.answer(welcome_text)
        logger.info(f"–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã {message.from_user.id} /start –±–∞—Å—Ç—ã")
    except Exception as e:
        logger.error(f"/start “õ–∞—Ç–µ—Å—ñ: {e}")

# /help –∫–æ–º–∞–Ω–¥–∞—Å—ã
@dp.message_handler(commands=['help'])
async def send_help(message: types.Message):
    help_text = (
        "üÜò –ö”©–º–µ–∫\n\n"
        "–ú–µ–Ω —Å—ñ–∑–≥–µ ”ô—Ä —Ç“Ø—Ä–ª—ñ —Å“±—Ä–∞“õ—Ç–∞—Ä“ì–∞ –∂–∞—É–∞–ø –±–µ—Ä–µ –∞–ª–∞–º—ã–Ω:\n"
        "‚Ä¢ –ê–Ω–∏–º–µ —Ç—É—Ä–∞–ª—ã –∞“õ–ø–∞—Ä–∞—Ç\n"
        "‚Ä¢ –ö”©—Ä–∫–µ–º ”ô–¥–µ–±–∏–µ—Ç\n"
        "‚Ä¢ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è–ª–∞—Ä\n"
        "‚Ä¢ –ñ”ô–Ω–µ –±–∞—Å“õ–∞ –¥–∞ –∫”©–ø—Ç–µ–≥–µ–Ω —Ç–∞“õ—ã—Ä—ã–ø—Ç–∞—Ä\n\n"
        "–ñ–∞–π “ì–∞–Ω–∞ ”©–∑ —Å“±—Ä–∞“ì—ã“£—ã–∑–¥—ã –∂–∞–∑—ã“£—ã–∑!"
    )
    await message.answer(help_text)

# –ë–∞—Ä–ª—ã“õ —Ö–∞–±–∞—Ä–ª–∞–º–∞–ª–∞—Ä“ì–∞ –∂–∞—É–∞–ø –±–µ—Ä—É
@dp.message_handler()
async def handle_all_messages(message: types.Message):
    try:
        # –•–∞–±–∞—Ä–ª–∞–º–∞–Ω—ã —Ç–µ–∫—Å–µ—Ä—É
        if not message.text or message.text.strip() == "":
            await message.answer("üìù –ú–∞“ì–∞–Ω –±—ñ—Ä–¥–µ“£–µ –∂–∞–∑—Å–∞“£—ã–∑—à—ã!")
            return

        user_text = message.text.strip()
        user_id = message.from_user.id
        username = message.from_user.username or "–±–µ–ª–≥—ñ—Å—ñ–∑"
        
        logger.info(f"–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã {user_id} (@{username}): {user_text}")

        # DeepSeek API-–≥–∞ –∑–∞–ø—Ä–æ—Å –¥–∞–π—ã–Ω–¥–∞—É
        headers = {
            "Authorization": f"Bearer {DEEPSEEK_API_KEY}",
            "Content-Type": "application/json"
        }
        
        data = {
            "model": "deepseek-chat",
            "messages": [{"role": "user", "content": user_text}],
            "temperature": 0.7,
            "max_tokens": 2000
        }

        # API-–≥–∞ –∑–∞–ø—Ä–æ—Å –∂—ñ–±–µ—Ä—É
        async with aiohttp.ClientSession() as session:
            async with session.post(DEEPSEEK_API_URL, json=data, headers=headers) as response:
                
                if response.status == 200:
                    response_data = await response.json()
                    bot_response = response_data["choices"][0]["message"]["content"]
                    
                    # –ñ–∞—É–∞–ø—Ç—ã“£ “±–∑—ã–Ω–¥—ã“ì—ã–Ω —Ç–µ–∫—Å–µ—Ä—É
                    if len(bot_response) > 4000:
                        bot_response = bot_response[:4000] + "..."
                    
                    await message.answer(bot_response)
                    logger.info(f"–ë–æ—Ç –∂–∞—É–∞–ø –±–µ—Ä–¥—ñ: {bot_response[:100]}...")
                
                elif response.status == 401:
                    await message.answer("üîë API –∫—ñ–ª—Ç—ñ –∂–∞—Ä–∞–º—Å—ã–∑. –ë–∞–π–ª–∞–Ω—ã—Å—Ç—ã—Ä—ã“£—ã–∑: @admin")
                    logger.error("API –∫—ñ–ª—Ç—ñ –∂–∞—Ä–∞–º—Å—ã–∑")
                
                elif response.status == 429:
                    await message.answer("‚è∞ –®–∞–º–∞–¥–∞–Ω —Ç—ã—Å –∫”©–ø —Å“±—Ä–∞—É–ª–∞—Ä. –ë—ñ—Ä–∞–∑–¥–∞–Ω –∫–µ–π—ñ–Ω “õ–∞–π—Ç–∞–ª–∞“£—ã–∑.")
                    logger.warning("–®–∞–º–∞–¥–∞–Ω —Ç—ã—Å –∫”©–ø —Å“±—Ä–∞—É–ª–∞—Ä")
                
                else:
                    error_text = await response.text()
                    await message.answer("‚ùå API “õ–∞—Ç–µ—Å—ñ. –ö–µ–π—ñ–Ω—ñ—Ä–µ–∫ “õ–∞–π—Ç–∞–ª–∞“£—ã–∑.")
                    logger.error(f"API “õ–∞—Ç–µ—Å—ñ: {response.status} - {error_text}")

    except aiohttp.ClientError as e:
        await message.answer("üåê –ñ–µ–ª—ñ “õ–∞—Ç–µ—Å—ñ. –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –±–∞–π–ª–∞–Ω—ã—Å—ã–Ω —Ç–µ–∫—Å–µ—Ä—ñ“£—ñ–∑.")
        logger.error(f"–ñ–µ–ª—ñ “õ–∞—Ç–µ—Å—ñ: {e}")
    
    except Exception as e:
        await message.answer("‚ùå –Ü—à–∫—ñ “õ–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã. –ö–µ–π—ñ–Ω—ñ—Ä–µ–∫ “õ–∞–π—Ç–∞–ª–∞“£—ã–∑.")
        logger.error(f"–ñ–∞–ª–ø—ã “õ–∞—Ç–µ: {e}")

# –ë–æ—Ç—Ç—ã —ñ—Å–∫–µ “õ–æ—Å—É
if __name__ == "__main__":
    try:
        logger.info("=== –ë–û–¢ –Ü–°–ö–ï “ö–û–°–´–õ–£–î–ê ===")
        logger.info(f"Bot Token: {BOT_TOKEN[:10]}...")
        logger.info(f"API Key: {DEEPSEEK_API_KEY[:10]}...")
        
        executor.start_polling(
            dp,
            skip_updates=True,
            timeout=60,
            relax=0.1
        )
        
    except Exception as e:
        logger.critical(f"–ë–æ—Ç—Ç—ã —ñ—Å–∫–µ “õ–æ—Å—É “õ–∞—Ç–µ—Å—ñ: {e}")
