import os
import logging
import random
import time
from datetime import datetime
from aiogram import Bot, Dispatcher, types, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import aiohttp
import asyncio
import json
from flask import Flask
from threading import Thread

# ================== KEEP_ALIVE “Æ–®–Ü–ù ================== #
app = Flask(__name__)

@app.route('/')
def home():
    return "ü§ñ AnimeAI Bot is Alive! üéå"

def run_flask():
    app.run(host='0.0.0.0', port=8080)

def keep_alive():
    thread = Thread(target=run_flask)
    thread.daemon = True
    thread.start()

# ================== .env –ñ“Æ–ö–¢–ï–£ ================== #
from dotenv import load_dotenv
load_dotenv()  # .env —Ñ–∞–π–ª—ã–Ω –µ“£ –±—ñ—Ä—ñ–Ω—à—ñ –∂“Ø–∫—Ç–µ—É!

# ================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ================== #
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("bot.log", encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω–¥–µ—Ä
BOT_TOKEN = os.environ.get('BOT_TOKEN') or "8302815646:AAH6fR8n6f5s7d8f9g0h1j2k3l4m5n6o7p8q"
DEEPSEEK_API_KEY = os.environ.get('DEEPSEEK_API_KEY') or "sk-10755111f4944829ba461145b8e3dd9c"
DEEPSEEK_API_URL = "https://api.deepseek.com/v1/chat/completions"

# Bot —ñ—Å–∫–µ “õ–æ—Å—É
bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# ================== –ö–ï–ô–Ü–ü–ö–ï–†–õ–ï–† ================== #
class AnimeStates(StatesGroup):
    waiting_for_anime_name = State()

# ================== –ö”ò–õ–ö–ï–õ–Ü –ñ–ê–£–ê–ü–¢–ê–† ================== #
FUNNY_RESPONSES = [
    "ü§î –ë—ñ—Ä–∞–∑ –æ–π–ª–∞–Ω–∞–π—ã–Ω...",
    "üéå –ê–Ω–∏–º–µ –¥–µ—Ç–µ–∫—Ç–∏–≤—ñ –∂“±–º—ã—Å —ñ—Å—Ç–µ–ø —Ç“±—Ä!",
    "üì∫ –≠–∫—Ä–∞–Ω–¥—ñ —ñ–∑–¥–µ—É —Ä–µ–∂–∏–º—ñ–Ω–¥–µ...",
    "üç• –†–∞–º–µ–Ω —ñ—à—ñ–ø, –æ–π–ª–∞–Ω–∞–º—ã–Ω...",
    "üéÆ –ñ–µ“£—ñ–ª–¥—ñ–∫ –∫–æ–¥—ã–Ω —ñ–∑–¥–µ—É–¥–µ...",
    "üîç –ê–Ω–∏–º–µ —ñ–∑–¥–µ—É –±–∞–∑–∞—Å—ã–Ω —Å–∫–∞–Ω–µ—Ä–ª–µ—É–¥–µ..."
]

ANIME_FACTS = [
    "üéé –ê–Ω–∏–º–µ —Å”©–∑—ñ '–∞–Ω–∏–º–∞—Ü–∏—è' –¥–µ–≥–µ–Ω —Å”©–∑–¥–µ–Ω —à—ã“õ“õ–∞–Ω!",
    "üìä –ñ–∞–ø–æ–Ω–∏—è–¥–∞ 400-–¥–µ–Ω –∞—Å—Ç–∞–º –∞–Ω–∏–º–µ —Å—Ç—É–¥–∏—è –±–∞—Ä!",
    "üèÜ 'Spirited Away' –û—Å–∫–∞—Ä –º–∞—Ä–∞–ø–∞—Ç—ã–Ω –∂–µ“£—ñ–ø –∞–ª“ì–∞–Ω —Ç“±“£“ì—ã—à –∞–Ω–∏–º–µ!",
    "üéµ –ö”©–ø—Ç–µ–≥–µ–Ω –∞–Ω–∏–º–µ–ª–µ—Ä–¥—ñ“£ —Å–∞—É–Ω–¥—Ç—Ä–µ–∫—Ç–µ—Ä—ñ —á–∞—Ä—Ç—Ç–∞—Ä–¥—ã –±–∞—Å—ã–ø –æ–∑“ì–∞–Ω!",
    "üåç –ê–Ω–∏–º–µ ”ô–ª–µ–º–¥–µ 100-–¥–µ–Ω –∞—Å—Ç–∞–º –µ–ª–¥–µ—Ä–¥–µ –∫”©—Ä—Å–µ—Ç—ñ–ª–µ–¥—ñ!"
]

# ================== –ò–ù–õ–ê–ô–ù –¢“Æ–ô–ú–ï–õ–ï–† ================== #
def get_main_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=2)
    buttons = [
        InlineKeyboardButton("üéå –ê–Ω–∏–º–µ —Ç—É—Ä–∞–ª—ã", callback_data="anime_info"),
        InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
        InlineKeyboardButton("üéÆ –ö”©–º–µ–∫", callback_data="help"),
        InlineKeyboardButton("‚ù§Ô∏è “∞–Ω–∞–π–¥—ã", callback_data="like")
    ]
    keyboard.add(*buttons)
    return keyboard

# ================== –ö–û–ú–ê–ù–î–ê–õ–ê–† ================== #
@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    user = message.from_user
    welcome_text = f"""
üéä <b>–°”ô–ª–µ–º, {user.first_name}!</b>

ü§ñ –ú–µ–Ω <b>AnimeAI –±–æ—Ç–ø—ã–Ω</b>! –ú–µ–Ω —Å—ñ–∑–≥–µ:
‚Ä¢ üéå –ê–Ω–∏–º–µ —Ç—É—Ä–∞–ª—ã –∞“õ–ø–∞—Ä–∞—Ç –±–µ—Ä–µ–º—ñ–Ω
‚Ä¢ üì∫ –ö–µ“£–µ—Å—Ç–µ—Ä “±—Å—ã–Ω–∞–º—ã–Ω  
‚Ä¢ üéé –ö”©“£—ñ–ª–¥—ñ —Ñ–∞–∫—Ç—ñ–ª–µ—Ä –∞–π—Ç–∞–º—ã–Ω
‚Ä¢ üîç –ö–µ–∑ –∫–µ–ª–≥–µ–Ω —Å“±—Ä–∞“õ—Ç–∞—Ä“ì–∞ –∂–∞—É–∞–ø –±–µ—Ä–µ–º—ñ–Ω

‚ú® –ñ–∞–π “ì–∞–Ω–∞ —Ö–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä—ñ“£—ñ–∑!
    """
    await message.answer(welcome_text, reply_markup=get_main_keyboard())
    logger.info(f"–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã {user.id} –±–æ—Ç—Ç—ã —ñ—Å–∫–µ “õ–æ—Å—Ç—ã")

@dp.message_handler(commands=['help'])
async def help_command(message: types.Message):
    help_text = """
üÜò <b>–ö”©–º–µ–∫ –±”©–ª—ñ–º—ñ:</b>

‚Ä¢ <b>–ê–Ω–∏–º–µ —Ç—É—Ä–∞–ª—ã —Å“±—Ä–∞“õ—Ç–∞—Ä:</b>
  - "Naruto —Ç—É—Ä–∞–ª—ã –∞–π—Ç"
  - "One Piece –∫–µ–π—ñ–ø–∫–µ—Ä–ª–µ—Ä—ñ"
  - "“∞—Å—ã–Ω–∞—Ç—ã–Ω –∞–Ω–∏–º–µ–ª–µ—Ä"

‚Ä¢ <b>–ñ–∞–ª–ø—ã —Å“±—Ä–∞“õ—Ç–∞—Ä:</b>
  - –ö–µ–∑ –∫–µ–ª–≥–µ–Ω —Ç–∞“õ—ã—Ä—ã–ø—Ç–∞ —Å“±—Ä–∞“õ “õ–æ—è –∞–ª–∞—Å—ã–∑!

‚Ä¢ <b>–ê—Ä–Ω–∞–π—ã –∫–æ–º–∞–Ω–¥–∞–ª–∞—Ä:</b>
  /start - –ë–æ—Ç—Ç—ã “õ–∞–π—Ç–∞ —ñ—Å–∫–µ “õ–æ—Å—É
  /help - –ö”©–º–µ–∫ –∞–ª—É
  /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞–Ω—ã –∫”©—Ä—É

üéØ <b>–ú—ã—Å–∞–ª —Å“±—Ä–∞“õ—Ç–∞—Ä:</b>
‚Ä¢ "Attack on Titan —Å–∏–Ω–æ–ø—Å–∏—Å—ñ"
‚Ä¢ "Studio Ghibli —Ñ–∏–ª—å–º–¥–µ—Ä—ñ" 
‚Ä¢ "–ï“£ “Ø–∑–¥—ñ–∫ —Ä–æ–º–∞–Ω—Ç–∏–∫–∞–ª—ã“õ –∞–Ω–∏–º–µ–ª–µ—Ä"
    """
    await message.answer(help_text)

@dp.message_handler(commands=['stats'])
async def stats_command(message: types.Message):
    stats_text = f"""
üìä <b>–ë–æ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞—Å—ã:</b>

‚Ä¢ üïê –ë–æ—Ç —ñ—Å–∫–µ “õ–æ—Å—ã–ª“ì–∞–Ω —É–∞“õ—ã—Ç: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
‚Ä¢ ü§ñ –ü–∞–∏–¥–∞–ª–∞–Ω—É—à—ã–ª–∞—Ä: –ö”©–ø! 
‚Ä¢ üéå –ê–Ω–∏–º–µ–ª–µ—Ä –±–∞–∑–∞—Å—ã: 1000+ 
‚Ä¢ ‚ö° –ñ“±–º—ã—Å —Ä–µ–∂–∏–º—ñ: –ë–µ–ª—Å–µ–Ω–¥—ñ

üîß <b>–¢–µ—Ö–Ω–∏–∫–∞–ª—ã“õ –∞“õ–ø–∞—Ä–∞—Ç:</b>
‚Ä¢ ü§ñ AI: DeepSeek
‚Ä¢ üêç –¢—ñ–ª: Python 3.11
‚Ä¢ üìö –ö—ñ—Ç–∞–ø—Ö–∞–Ω–∞: Aiogram 2.25
    """
    await message.answer(stats_text)

# ================== –ò–ù–õ–ê–ô–ù –¢“Æ–ô–ú–ï–õ–ï–† ================== #
@dp.callback_query_handler(lambda c: c.data == 'anime_info')
async def anime_info_callback(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(
        callback_query.from_user.id,
        "üéå <b>–ê–Ω–∏–º–µ –∞“õ–ø–∞—Ä–∞—Ç—ã:</b>\n\n–ê–Ω–∏–º–µ —Ç—É—Ä–∞–ª—ã –∫–µ–∑ –∫–µ–ª–≥–µ–Ω —Å“±—Ä–∞“õ “õ–æ—è –∞–ª–∞—Å—ã–∑! –ú—ã—Å–∞–ª—ã:\n‚Ä¢ 'Naruto —Å–∏–Ω–æ–ø—Å–∏—Å—ñ'\n‚Ä¢ '–ï“£ “Ø–∑–¥—ñ–∫ –∞–Ω–∏–º–µ–ª–µ—Ä'\n‚Ä¢ '–ñ–∞–ø–æ–Ω–∏—è –º—É–ª—å—Ç—Ñ–∏–ª—å–º–¥–µ—Ä—ñ'",
        reply_markup=get_main_keyboard()
    )

@dp.callback_query_handler(lambda c: c.data == 'stats')
async def stats_callback(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await stats_command(callback_query.message)

@dp.callback_query_handler(lambda c: c.data == 'help')
async def help_callback(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await help_command(callback_query.message)

@dp.callback_query_handler(lambda c: c.data == 'like')
async def like_callback(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id, "‚ù§Ô∏è –†–∞—Ö–º–µ—Ç!")
    await bot.send_message(
        callback_query.from_user.id,
        "‚ù§Ô∏è <b>–†–∞—Ö–º–µ—Ç “õ–æ–ª–¥–∞—É—ã“£—ã–∑ “Ø—à—ñ–Ω!</b>\n\n–ë–æ—Ç—Ç—ã –∂–∞“õ—Å–∞—Ä—Ç—É“ì–∞ –∫”©–º–µ–∫—Ç–µ—Å—É “Ø—à—ñ–Ω –∫–µ–∑ –∫–µ–ª–≥–µ–Ω –ø—ñ–∫—ñ—Ä—ñ“£—ñ–∑–¥—ñ –∂—ñ–±–µ—Ä—ñ“£—ñ–∑!",
        reply_markup=get_main_keyboard()
    )

# ================== –ù–ï–ì–Ü–ó–ì–Ü –•–ê–ë–ê–†–õ–ê–ú–ê–õ–ê–† ================== #
@dp.message_handler()
async def handle_all_messages(message: types.Message):
    try:
        user_text = message.text.strip()
        user_id = message.from_user.id
        
        # –ö”©“£—ñ–ª–¥—ñ –∂–∞—É–∞–ø –±–µ—Ä—É
        funny_response = random.choice(FUNNY_RESPONSES)
        wait_msg = await message.answer(f"{funny_response}...")
        
        # –ö–µ–π–¥–µ –∫”©“£—ñ–ª–¥—ñ —Ñ–∞–∫—Ç—ñ “õ–æ—Å—É
        if random.random() < 0.1:  # 10% —ã“õ—Ç–∏–º–∞–ª–¥—ã“õ
            fact = random.choice(ANIME_FACTS)
            await message.answer(f"üí° <b>–ë—ñ–ª–µ—Å—ñ–∑ –±–µ?</b>\n\n{fact}")

        # DeepSeek API-–≥–µ —Å“±—Ä–∞—É
        headers = {
            "Authorization": f"Bearer {DEEPSEEK_API_KEY}",
            "Content-Type": "application/json"
        }
        
        data = {
            "model": "deepseek-chat",
            "messages": [{
                "role": "user", 
                "content": f"–°”ô–ª–µ–º! –ú–µ–Ω—ñ“£ —Å“±—Ä–∞“ì—ã–º: {user_text}. ”®–∑–±–µ–∫ –∂”ô–Ω–µ –æ—Ä—ã—Å —Ç—ñ–ª–¥–µ—Ä—ñ–Ω–¥–µ –∂–∞—É–∞–ø –±–µ—Ä."
            }],
            "temperature": 0.7,
            "max_tokens": 2000
        }

        async with aiohttp.ClientSession() as session:
            async with session.post(DEEPSEEK_API_URL, json=data, headers=headers) as response:
                if response.status == 200:
                    response_data = await response.json()
                    bot_response = response_data["choices"][0]["message"]["content"]
                    
                    # –ñ–∞—É–∞–ø—Ç—ã –±”©–ª—É (–µ–≥–µ—Ä —Ç—ã–º “±–∑—ã–Ω –±–æ–ª—Å–∞)
                    if len(bot_response) > 4000:
                        parts = [bot_response[i:i+4000] for i in range(0, len(bot_response), 4000)]
                        for part in parts:
                            await message.answer(part)
                    else:
                        await message.answer(bot_response)
                    
                    # –ö“Ø—Ç—É —Ö–∞–±–∞—Ä–ª–∞–º–∞—Å—ã–Ω ”©—à—ñ—Ä—É
                    await bot.delete_message(message.chat.id, wait_msg.message_id)
                    
                    logger.info(f"–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã {user_id} —Å”ô—Ç—Ç—ñ –∂–∞—É–∞–ø –∞–ª–¥—ã")
                    
                else:
                    error_msg = await response.text()
                    await message.answer("‚ùå <b>“ö–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã:</b>\n\nAPI –∂–∞—É–∞–ø –±–µ—Ä–º–µ–π–¥—ñ. –ö–µ–π—ñ–Ω—ñ—Ä–µ–∫ “õ–∞–π—Ç–∞–ª–∞“£—ã–∑.")
                    logger.error(f"API “õ–∞—Ç–µ—Å—ñ: {response.status} - {error_msg}")

    except Exception as e:
        logger.error(f"–ñ–∞–ª–ø—ã “õ–∞—Ç–µ: {e}")
        await message.answer("‚ùå <b>–¢–µ—Ö–Ω–∏–∫–∞–ª—ã“õ “õ–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã:</b>\n\n–ö–µ–π—ñ–Ω—ñ—Ä–µ–∫ “õ–∞–π—Ç–∞–ª–∞–ø –∫”©—Ä—ñ“£—ñ–∑.")

# ================== –ë–û–¢–¢–´ –Ü–°–ö–ï “ö–û–°–£ ================== #
async def on_startup(dp):
    logger.info("‚úÖ –ë–æ—Ç —Å”ô—Ç—Ç—ñ —ñ—Å–∫–µ “õ–æ—Å—ã–ª–¥—ã!")
    try:
        await bot.send_message(8302815646, "üöÄ –ë–æ—Ç —ñ—Å–∫–µ “õ–æ—Å—ã–ª–¥—ã!")
    except:
        pass

async def on_shutdown(dp):
    logger.warning("‚ùå –ë–æ—Ç ”©—à—ñ—Ä—É–¥–µ...")
    await bot.close()

if __name__ == "__main__":
    # Keep_alive —ñ—Å–∫–µ “õ–æ—Å—É
    keep_alive()
    logger.info("üåê Keep_alive —Å–µ—Ä–≤–µ—Ä—ñ —ñ—Å–∫–µ “õ–æ—Å—ã–ª–¥—ã!")
    
    logger.info("ü§ñ AnimeAI –±–æ—Ç —ñ—Å–∫–µ “õ–æ—Å—ã–ª—É–¥–∞...")
    executor.start_polling(
        dp, 
        skip_updates=True,
        on_startup=on_startup,
        on_shutdown=on_shutdown
)
